
name: Creat Config

on: 
  release:
    types: [published]
  workflow_dispatch:
      inputs:
        ssh:
          description: '使用ssh连接吗？'
          required: true
          default: 'true'
        config_name:
          description: '自定义.config输出文件名'
          default: 'my.config'
        package_openclash:
          description: '添加OpenClash？'
          required: false
          default: 'false'
      

  #push:
  #  branches: 
  #    - master

  # # 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  # schedule:
  #   - cron: 30 8 * * *

  #watch:
  #  types: [started]
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-22.03
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  TZ: Asia/Shanghai

jobs:
  build:
    name: 生成.config文件
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@master
    

    - name: 编译环境部署
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        sudo timedatectl set-timezone "$TZ"
        docker rmi `docker images -q`
        echo "正在删除文件"
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        echo "正在更新数据源列表"
        sudo -E apt-get update
        echo "正在安装依赖"
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        echo "正在清理不需要的依赖"
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: 下载源码
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        #echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default

    - name: 加载自定义feeds和自定义脚本1
      run: |
        if [[ -e $FEEDS_CONF ]]; then
          echo "存在feeds文件$FEEDS_CONF，加载自定义feeds"
          mv $FEEDS_CONF ./openwrt/feeds.conf.default
        else
          echo "不存在feeds文件，跳过"
        fi
        if [[ -e $DIY_P1_SH ]]; then
          echo "存在自定义脚本$DIY_P1_SH，开始执行"
          chmod +x $DIY_P1_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
        else
          echo "不存在自定义脚本，跳过"
        fi
    
    - name: 添加额外feeds：OpenClash
      if: github.event.inputs.package_openclash == 'true' && github.event.inputs.package_openclash  != 'false'
      working-directory: ./openwrt
      run: |
        git clone -b master https://github.com/vernesong/OpenClash.git package/openclash

    - name: 升级feeds和安装feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    

    #- name: Import external feeds - passwall
    #  working-directory: ./openwrt
    #  run: |
    #    git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
    #    git clone "your_github_link" package/"your_folder_name"      

    #- name: Import external feeds - JerryKuKu Argon
    #  working-directory: ./openwrt
    #  run: |
    #    git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon-jerrykuku
    
    - name: SSH远程连接（制作.config配置文件）
      if: github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false'
      uses: danshui-git/debugger-action@main
    
    # - name: SSH连接到Actions
    #   uses: P3TERX/ssh2actions@v1.0.0
    #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
    #   env:
    #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    
    - name: 整理.config文件路径
      run: |
        cd openwrt
        echo "CONFIG_PWD=$PWD" >> $GITHUB_ENV
    
    - name: 上传.config文件
      uses: actions/upload-artifact@main
      with:
        name: ${{ github.event.inputs.config_name }}
        path: ${{ env.CONFIG_PWD }}/.config
    
